// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2021 22:09:42"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ccpu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ccpu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] Data;
reg [1:0] F;
reg Reset;
reg [1:0] Rx;
reg [1:0] Ry;
reg clk;
reg in;
reg w;
// wires                                               
wire [7:0] BusWires;
wire Done;
wire Extern;
wire FRin;
wire [0:5] FuncReg;
wire [0:3] I;
wire [0:3] T;
wire [0:3] Xreg;
wire out;

// assign statements (if any)                          
ccpu i1 (
// port map - connection between master ports and signals/registers   
	.BusWires(BusWires),
	.Data(Data),
	.Done(Done),
	.\Extern (Extern),
	.F(F),
	.FRin(FRin),
	.FuncReg(FuncReg),
	.I(I),
	.Reset(Reset),
	.Rx(Rx),
	.Ry(Ry),
	.T(T),
	.Xreg(Xreg),
	.clk(clk),
	.in(in),
	.out(out),
	.w(w)
);
initial 
begin 
#1000000 $finish;
end 
// Data[ 7 ]
initial
begin
	Data[7] = 1'b0;
end 
// Data[ 6 ]
initial
begin
	Data[6] = 1'b0;
end 
// Data[ 5 ]
initial
begin
	Data[5] = 1'b0;
end 
// Data[ 4 ]
initial
begin
	Data[4] = 1'b0;
end 
// Data[ 3 ]
initial
begin
	Data[3] = 1'b0;
end 
// Data[ 2 ]
initial
begin
	Data[2] = 1'b0;
end 
// Data[ 1 ]
initial
begin
	Data[1] = 1'b0;
end 
// Data[ 0 ]
initial
begin
	Data[0] = 1'b0;
end 
// F[ 1 ]
initial
begin
	F[1] = 1'b0;
end 
// F[ 0 ]
initial
begin
	F[0] = 1'b0;
end 

// Reset
initial
begin
	Reset = 1'b0;
	Reset = #60000 1'b1;
	Reset = #80000 1'b0;
end 
// Rx[ 1 ]
initial
begin
	Rx[1] = 1'b0;
end 
// Rx[ 0 ]
initial
begin
	Rx[0] = 1'b0;
end 
// Ry[ 1 ]
initial
begin
	Ry[1] = 1'b0;
end 
// Ry[ 0 ]
initial
begin
	Ry[0] = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// in
initial
begin
	in = 1'b0;
end 

// w
initial
begin
	w = 1'b1;
end 
endmodule

